# Introduction {#sec-introduction}

This tutorial introduces a GRASS GIS tool set for species distribution modeling, and shows how to use it effectively in combination with other core modules and add-ons to predict the future potential distribution of the almond-eyed ringlet butterfly. The first part focuses on the essential building blocks of creating a species distribution model, from data collection to prediction. In the second part, we’ll dive deeper into the options, choices, and parameter settings to validate and fine-tune the model.

::: {.callout-tip collapse="true"}
## Tips and conventions used in this tutorial.

The following typographical conventions are used in this tutorial:

-   [Names of databases, storage locations, file names]{.style-db}
-   [Names of GRASS data layers]{.style-data}
-   [Menu and toolbar items]{.style-menu}
-   [Name of programs, code libraries, addons]{.style-apps}
-   [Function names, parameters, variable names]{.style-function}
-   [Parameter settings, user-supplied values]{.style-parameter}

The examples in this tutorial show you how to run modules / functions using:

-   [{{< fa solid terminal >}}]{.paneltabcolor}     the command line
-   [{{< fa brands python >}}]{.paneltabcolor}     Python code
-   [{{< fa regular window-restore >}}]{.paneltabcolor}     GUI dialogs

Throughout the text, you'll find cross-references with hyperlinks to e.g., figures, literature references and footnotes. Instead of clicking the hyperlink, you can also hoover over the link with your mouse. This will open the corresponding figure, reference or footnote in a floating Window. Try for example @fig-erebiaalberganus.

Some code is enriched with explanatory notes. You can read these notes by clicking on the number next to the code. See for example:

``` python
print("this is an example") # <1>
```

1.  You got it

<br>Clicking on the circled number in the code block will open a pop-up window. If you hover over a code block, you will also see a small 'clipboard' icon {{< fa regular clipboard 2xs>}}. Click it to copy the code.
:::

The examples in this tutorial show you how to run functions from the command line, using Python and, and using the GUI dialogs. There will not (always) be an explanation of the different settings and parameters. Instead, each time a function is used, a link is provided to the corresponding help page. These help pages are quite good, and you are encouraged to read them to fully understand the choices made in the tutorial.

## GRASS GIS

Go to the GRASS GIS website and open the [download page](https://grass.osgeo.org/download/) for your operating system from the menu. Use the stable release (at the time of writing, this is version 8.4.0).

Window users will find that there are two main flavors on the [download page](https://grass.osgeo.org/download/windows/); the standalone winGRASS installer and the OSGeo4W installer. I recommend the latter, as it allows you to install a broad range of open source geospatial software packages, such as QGIS and GDAL/OGR. And it offers an easier way to update the software. Note that on Windows, if you have QGIS installed, there is a good change you already have GRASS GIS. In that case, just check if you have the latest version.

## GRASS addons

The three main modules used in this tutorial are [v.maxent.swd](https://grass.osgeo.org/grass-stable/manuals/addons/v.maxent.swd.html), [r.maxent.train](https://grass.osgeo.org/grass-stable/manuals/addons/r.maxent.train.html) and [r.maxent.predict](https://grass.osgeo.org/grass-stable/manuals/addons/r.maxent.predict.html). Install these addons with the [g.extension](https://grass.osgeo.org/grass-stable/manuals/g.extension.html) module.

::: {#exm-Cb1zDqdZuC .hiddendiv}
:::

::: {.panel-tabset group="interface"}
## {{< fa solid terminal >}}

``` bash
g.extension extension=v.maxent.swd
g.extension extension=r.maxent.train
g.extension extension=r.maxent.predict
```

## {{< fa brands python >}}

``` python
import grass.script as gs               # <1>
gs.run_command("g.extension", extension="v.maxent.swd")
gs.run_command("g.extension", extension="r.maxent.train")
gs.run_command("g.extension", extension="r.maxent.predict")
```

1.  Note that you only need to import the [grass.script]{.style-function} once per session. So this will only be shown once here.

## {{< fa regular window-restore >}}

{{< video "https://ecodiv.earth/share/sdm_in_grassgis/install_addons.mp4" >}}

Repeat the same for the other two addons.
:::

Installed modules can be run by typing their name in the Console or terminal. They are also available from the [Tools]{.style-menu} panel under [Addons]{.style-menu}. If you don't see them after installing them, you may have to restart GRASS first. You will install and use a few other addons later on in the tutorial.

## Maxent {#sec-maxentsoftware}

The addons [r.maxent.train](https://grass.osgeo.org/grass-stable/manuals/addons/r.maxent.train.html) and [r.maxent.predict](https://grass.osgeo.org/grass-stable/manuals/addons/r.maxent.predict.html) both require the [Maxent]{.style-apps} software. Download the software from the [Maxent website](https://biodiversityinformatics.amnh.org/open_source/maxent/) and extract the [Maxent.jar]{.style-apps} file. When running [r.maxent.train]{.style-function} and [r.maxent.predict]{.style-function} for the first time you'll need to provide the path to this file. For now, just remember the location of the [Maxent.jar]{.style-apps} file.

The Maxent software can be used on any computer running Java version 1.4 or later. For the Java runtime environment, the Maxent website refers to java.sun.com/javase/downloads, but OpenJDK should work as well. There is a good change you already have Java installed, but if not, you can download it from e.g., [here](https://www.azul.com/downloads/#zulu) or [here](https://openjdk.org/).

::: {.callout-tip collapse="true"}
## For Window users

For Window users, the path to the java executable may need to be specified. First, you need to find the path to the `java.exe`. Open the Command Prompt window (in the search bar, search for Command promt) and type in the following command and press Enter:

``` bash
where java
```

On my computer, this looks like this, but note that the path will depend on how you have installed Java.

``` bash
C:\Program Files\Zulu\zulu-21\bin\java.exe
```

Now, you can add it to the `o4w_env.bat` file. GRASS GIS will look at this file at start up. The file is located in the `OSGEO4W_ROOT/bin` directory. Where that root directory is depends on how you have installed GRASS GIS. If you installed it using the [OSGeo4W]{.style-app} installer, you probably find it in `c:\OSGeo4W\bin`. If you installed it using the stand-alone installer, you probably find it in `c:\Program Fiels\GRASS GIS 8.4\bin`. To add the path to your Java executable in the o4w_env.bat file, follow these steps:

-   Open o4w_env.bat in a text editor (you may need administrative privileges).
-   Locate the line that begins with set path=.
-   At the end of this line, add a semicolon ; followed by the full path to your Java executable. For example:

```         
set path=%path%;C:\Path\To\Java\bin
```

Replace C:\Path\To\Java\bin with the actual path where Java is installed on your system.

Save and close the file. To check if it works, start [GRASS GIS]{.style-app}, and on the command line, type:

``` bash
java
```

This should give you something like:

```         
Usage: java [options] <mainclass> [args...]
           (to execute a class)
   or  java [options] -jar <jarfile> [args...]
           (to execute a jar file)
   or  java [options] -m <module>[/<mainclass>] [args...]
       java [options] --module <module>[/<mainclass>] [args...]
           (to execute the main class in a module)
   or  java [options] <sourcefile> [args]
           (to execute a single source-file program)

 Arguments following the main class, source file, -jar <jarfile>,
 -m or --module <module>/<mainclass> are passed as the arguments to
 main class.
```
:::

I haven't tested this on a Mac, but presumably, similar steps should be followed as on Windows to make sure GRASS GIS can find the Java executable.
